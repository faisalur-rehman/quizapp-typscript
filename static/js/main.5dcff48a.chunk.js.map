{"version":3,"sources":["Services/API.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","utils.ts","images/nattu-adnan-unsplash.jpg","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","index","correctAnswer","onClick","value","disabled","fetchData","total","difficulty","a","URL","fetch","response","json","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","setQuestionNumber","quizOver","setQuizOver","loading","setLoading","questions","setQuestions","setUserAnswer","score","setScore","StartQuiz","HARD","length","undefined","e","selectedOption","currentTarget","prev","UserObj","isCorrect","TOTAL_QUESTIONS","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5dcff48a.chunk.js","sourcesContent":["import { shuffleArray } from \"../utils\";\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"medium\",\r\n}\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport const fetchData = async (total: number, difficulty: Difficulty) => {\r\n  const URL = `https://opentdb.com/api.php?amount=${total}&type=multiple`;\r\n  const response = await fetch(URL);\r\n  let { results } = await response.json();\r\n  return results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? \"linear-gradient(90deg, #56FFA4, #59BC86)\"\r\n        : !correct && userClicked\r\n        ? \"linear-gradient(90deg, #FF5656, #C16868)\"\r\n        : \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { AnswerObject } from \"../App\";\r\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNumber: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNumber,\r\n  totalQuestions,\r\n}) => {\r\n  return (\r\n    <Wrapper>\r\n      <p className=\"questionNumber\">\r\n        Question: {questionNumber} / {totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }} />\r\n      <div>\r\n        {answers.map((answer, index) => (\r\n          <ButtonWrapper\r\n            key={index}\r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userClicked={userAnswer?.userAnswer === answer}\r\n          >\r\n            <button onClick={callback} value={answer} disabled={!!userAnswer}>\r\n              {answer}\r\n              <br />\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default QuestionCard;\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","export default __webpack_public_path__ + \"static/media/nattu-adnan-unsplash.c866d607.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\r\nimport BGImage from \"./images/nattu-adnan-unsplash.jpg\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n  * {\r\n    font-family: 'Catamaran', sans-serif;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  > p {\r\n    color: white;\r\n  }\r\n  .score {\r\n    color: white;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n  h1 {\r\n    font-family: Fascinate Inline;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport QuestionCard from \"./components/QuestionCard\";\r\nimport { fetchData } from \"./Services/API\";\r\nimport { QuestionState } from \"./Services/API\";\r\n\r\nimport { Difficulty } from \"./Services/API\";\r\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\r\n\r\nexport type AnswerObject = {\r\n  question: string;\r\n  userAnswer: string;\r\n  isCorrect: boolean;\r\n  correctAnswer: string;\r\n};\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nconst App = () => {\r\n  const [questionNumber, setQuestionNumber] = useState(0);\r\n  const [quizOver, setQuizOver] = useState(true);\r\n  const [loading, setLoading] = useState(false);\r\n  const [questions, setQuestions] = useState<QuestionState[]>();\r\n  const [userAnswer, setUserAnswer] = useState<AnswerObject[]>([]);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const StartQuiz = async () => {\r\n    setLoading(true);\r\n    setQuizOver(false);\r\n    const questions = await fetchData(TOTAL_QUESTIONS, Difficulty.HARD);\r\n    setQuestions(questions);\r\n    setLoading(false);\r\n    setQuestionNumber(0);\r\n    setUserAnswer([]);\r\n    setScore(0);\r\n  };\r\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (questions) {\r\n      const selectedOption = e.currentTarget.value;\r\n      const correct =\r\n        questions[questionNumber].correct_answer === selectedOption;\r\n      if (correct) {\r\n        setScore((prev) => prev + 1);\r\n      }\r\n      const UserObj = {\r\n        question: questions[questionNumber].question,\r\n        userAnswer: selectedOption,\r\n        isCorrect: correct,\r\n        correctAnswer: questions[questionNumber].correct_answer,\r\n      };\r\n      setUserAnswer((prev) => [...prev, UserObj]);\r\n    }\r\n  };\r\n  const nextQuestion = () => {\r\n    if (questions && questionNumber + 1 !== questions.length) {\r\n      setQuestionNumber((prev) => prev + 1);\r\n    } else {\r\n      setQuizOver(true);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Wrapper className=\"App\">\r\n        <h1>React Quiz</h1>\r\n        {quizOver || userAnswer.length === TOTAL_QUESTIONS ? (\r\n          <button className=\"start\" onClick={StartQuiz}>\r\n            Start\r\n          </button>\r\n        ) : null}\r\n        {!quizOver && <p className=\"score\">Score: {score}</p>}\r\n        {loading && <p>Loading...</p>}\r\n        {questions !== undefined ? (\r\n          <QuestionCard\r\n            questionNumber={questionNumber + 1}\r\n            question={questions[questionNumber].question}\r\n            answers={questions[questionNumber].answers}\r\n            callback={checkAnswer}\r\n            userAnswer={userAnswer ? userAnswer[questionNumber] : undefined}\r\n            totalQuestions={TOTAL_QUESTIONS}\r\n          />\r\n        ) : null}\r\n        {!quizOver &&\r\n        !loading &&\r\n        userAnswer.length === questionNumber + 1 &&\r\n        questionNumber !== TOTAL_QUESTIONS - 1 ? (\r\n          <button className=\"next\" onClick={nextQuestion}>\r\n            Next Question\r\n          </button>\r\n        ) : null}\r\n      </Wrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}